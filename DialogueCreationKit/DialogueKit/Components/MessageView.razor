@using DialogueCreationKit.DialogueKit.Enums;
@using DialogueCreationKit.DialogueKit.Managers;
@using DialogueCreationKit.DialogueKit.Models;

<style>
    .message {
        padding: 8px;
        border-width: 1px;
        border-style: outset;
        border-color: #00000010;
        box-shadow: 0px 0px 10px 0px #00000010;
        margin-bottom: 4px;
        margin-top: 4px;
        /*background-color: #ffffff;*/
    }

    .message .header {
        display: flex; 
        flex-direction: row;
        align-items: center;
        border-bottom: 1px dashed #00000020;
        padding-bottom: 8px;
    }

    .message .header .avatar {
        margin-right: 8px;
        min-width: 32px;
    }

    .message .header .title {
        /*margin-left: 8px;*/
        display: flex;
        align-items: center;
        justify-content: space-between;
        width: 100%;
    }

    .message .header .title .name{
        color: rgba(0, 0, 0, 0.85);
        font-size: 16px;
        margin-bottom: 0;
    }

    .message .header .title .id {
        color: rgba(0, 0, 0, 0.45);
        font-size: 14px;
    }

    .mr-8,
    .message .header .title {
        margin-right: 8px;
    }

    .ml-8,
    .message .header .title {
        margin-left: 8px;
    }
</style>

<li @onclick=@Message.OnMessageClick class="message" id="@Message.Message.Id" style="background-color: @(GetColor())">
    <div draggable="true" @ondrop="@OnDrop" @ondragstart="@OnDragStart" ondragover="event.preventDefault()">
        <div class="header">
            <Avatar Style=@(Message.Npc.IsFisrt ? colorAvatar0 : colorAvatar1) Class="avatar">
                @Message.Npc.Name[0]
            </Avatar>
            <div class="title">
                <h4 class="name ml-8">
                    @Message.Npc.Name
                </h4>
                @if (Message.Npc.IsFisrt && Message.Node.Stage != DialogueStage.Begin && Message.Node.Stage != DialogueStage.End)
                {
                    <Checkbox Checked=@(Message.Node.Childs.Count > 0) CheckedChanged=@(()=> { Message.Node.Childs.RemoveAt(1); UpdateTheme.InvokeAsync();})>Новая тема</Checkbox>
                }
                @*<div style="display: flex; flex-wrap: wrap;">
                    <div class="id ml-8">
                        <span>
                            Id сообщения: 
                        </span>
                        <span class="ml-8">
                            @Message.Message.Id.ToString()
                        </span>
                    </div>
                </div>*@
            </div>
        </div>
        <div>
            @Message.Message.Content
        </div>
    </div>
    </li>

@code {
    private string colorAvatar0 = "background-color: #ff8080";
    private string colorAvatar1 = "background-color: #80ff80";

    private string colorBegin = "#b3efb7";
    private string[] colorContent = { "#FDD9B5", "#7FFFD4", "#FFDEAD", "#9ACEEB" };
    private string colorEnd = "#efbeb7";

    private string GetColor()
    {
        return Message.Node.Stage switch
        {
            DialogueStage.Begin => colorBegin,
            DialogueStage.Content => colorContent[Message.Theme % colorContent.Length],
            DialogueStage.End => colorEnd
        };
    }

    [Parameter]
    public DialogueMessageView Message { get; set; }

    [Parameter]
    public EventCallback<DragEventArgs> OnDrop { get; set; }
    [Parameter]
    public EventCallback<DragEventArgs> OnDragStart { get; set; }

    [Parameter]
    public EventCallback UpdateTheme { get; set; }

    public bool Loading { get; set; } = false;
    
}

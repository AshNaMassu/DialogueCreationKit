@using DialogueCreationKit.DialogueKit.Enums;
@using DialogueCreationKit.DialogueKit.Managers;
@using DialogueCreationKit.DialogueKit.Models;
@using DialogueCreationKit.DialogueKit.Models.View;

<style>
    .message {
        padding: 8px;
        border-width: 1px;
        border-style: outset;
        border-color: #00000010;
        box-shadow: 0px 0px 10px 1px #00000040;
        margin-bottom: 4px;
        margin-top: 4px;
        /*background-color: #ffffff;*/
    }

    .message .header {
        display: flex; 
        flex-direction: row;
        align-items: center;
        border-bottom: 1px dashed #00000020;
        padding-bottom: 8px;
    }

    .message .header .avatar {
        margin-right: 8px;
        min-width: 32px;
    }

    .message .header .title {
        /*margin-left: 8px;*/
        display: flex;
        align-items: center;
        justify-content: space-between;
        width: 100%;
    }

    .message .header .title .name{
        color: rgba(0, 0, 0, 0.85);
        font-size: 16px;
        margin-bottom: 0;
    }

    .message .header .title .id {
        color: rgba(0, 0, 0, 0.45);
        font-size: 14px;
    }

    .mr-8,
    .message .header .title {
        margin-right: 8px;
    }

    .ml-8,
    .message .header .title {
        margin-left: 8px;
    }
</style>

@inject DialogueCreationModel Model
@implements IDisposable

@if (Model.Mode == DialogueCreateMode.Dialogue)
{
    <li class="message" id="@Message.Id" style="background: @(GetColor())">
        <div draggable="true" @ondrop="@OnDrop" @ondragstart="@OnDragStart" ondragover="event.preventDefault()">
            <div class="header">
                <Avatar Style=@(_isActor ? colorAvatar0 : colorAvatar1) Class="avatar">
                    @(
                        _isActor ? Model.ActorName[0] : Model.Companion.Name[0]
                        )
                </Avatar>
                <div class="title">
                    <h4 class="name ml-8">
                        @(
                            _isActor ? Model.ActorName : Model.Companion.Name
                            )
                    </h4>
                    @if (_stage.Stage == DialogueStage.Content && _isActor && Message.Id > 3)
                    {
                        <Checkbox @bind-Checked=@_stage.IsNewTheme>Новая тема</Checkbox>
                    }
                </div>
            </div>
            <div>
                @Message.Message.Content
            </div>
        </div>
    </li>
}
else
{
    <li class="message" id="@Message.Id" style="background: #ffffff">
        <div draggable="true" @ondrop="@OnDrop" @ondragstart="@OnDragStart" ondragover="event.preventDefault()">
            <div>
                @Message.Message.Content
            </div>
        </div>
    </li>
}


@code {
    private string colorAvatar0 = "background-color: #ff8080";
    private string colorAvatar1 = "background-color: #8080ff";

    private string colorBegin = "#b3efb7";
    private string[] colorContent = { "#7FFFD4", "#9ACEEB" };
    private string colorEnd = "#efbeb7";
    private string colorDefault = "#ffffff";

    private string GetColor()
    {
        return _stage.Stage switch
        {
            DialogueStage.Begin => colorBegin,
            DialogueStage.Content => colorContent[_stage.IdTheme],
            DialogueStage.End => colorEnd,
            _ => colorDefault
        };
    }

    private bool _isActor => Message.Id % 2 == 0;

    private DialogueStageView _stage { get; set; }

    [Parameter]
    public DialogueMessageView Message { get; set; }
    [Parameter]
    public EventCallback<DragEventArgs> OnDrop { get; set; }
    [Parameter]
    public EventCallback<DragEventArgs> OnDragStart { get; set; }

    private void UpdateTheme()
    {
        DialogueCreationManager.UpdateTheme(Model, true);
    }

    protected override async Task OnInitializedAsync()
    {
        _stage = Model.ListStage[Message.Id];
        _stage.OnUpdateThemeEvent += UpdateTheme;
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
    }

    public void Dispose()
    {
        _stage.OnUpdateThemeEvent -= UpdateTheme;        
    }
}

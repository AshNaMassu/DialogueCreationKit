@page "/"
@page "/create"
@using DialogueCreationKit.DialogueKit.Components
@using DialogueCreationKit.DialogueKit.Enums;
@using DialogueCreationKit.DialogueKit.Managers;
@using DialogueCreationKit.DialogueKit.Models
@using System.Text.Json;
@using System.ComponentModel.DataAnnotations;
@using System.Globalization;
@using DialogueCreationKit.DialogueKit.Models.View;

<style>
    .grid-row {
        padding-top: 8px;
        padding-bottom: 8px;
    }

        .grid-row.main {
            height: 100%;
        }

    .grid-col-main {
        background-color: #0000ff05;
        padding-left: 16px;
        padding-right: 16px;
        height: 100%;
        overflow-y: auto;
    }

</style>

@inject IJSRuntime JSRuntime
@inject DialogueCreationModel Model
@implements IDisposable

<GridRow Class="grid-row main">
    <!--main-->
    <GridCol Span="12" Class="grid-col-main" >
        <!--col 0-->
        <GridRow Class="grid-row ">
            <GridCol Span=8>
                <Select @bind-Value="@Model.Mode"
                        DefaultValue="@DialogueCreateMode.Dialogue"
                        TItemValue="DialogueCreateMode"
                        TItem="string" >
                    <SelectOptions>
                        <SelectOption TItemValue="DialogueCreateMode" TItem="string" Value="@DialogueCreateMode.Dialogue" Label="Диалог" />
                        <SelectOption TItemValue="DialogueCreateMode" TItem="string" Value="@DialogueCreateMode.RandomMessages" Label="Рандомные сообщения" />
                    </SelectOptions>
                </Select>
            </GridCol>

            <GridCol Flex=@("16px") />

            <GridCol Span="5" Offset="4">
                <Button Block Icon="@IconType.Outline.Sync" OnClick="@(() => DialogueCreationManager.CreateMessageList(Model))">Обновить</Button>
            </GridCol>

        </GridRow>

       
        <GridRow Class="grid-row ">
            <GridCol Flex=@("auto")>
                @if (Model != null)
                {
                    <GridRow Class="grid-row ">
                        <GridCol Span=4>
                            @(Model.Mode == DialogueCreateMode.Dialogue ? "Главный герой" : "Имя файла")
                        </GridCol>
                    </GridRow>

                    <GridRow Class="grid-row ">
                        <GridCol Span="12">
                                <Input @bind-Value="@Model.ActorName" Placeholder="Имя" />
                            </GridCol>
                        </GridRow>
                }

                @if (Model.Mode == DialogueCreateMode.Dialogue && Model.Companion != null)
                {
                    <GridRow Class="grid-row ">
                        <GridCol Span=4>
                             Собеседник
                       </GridCol>
                    </GridRow>

                    <GridRow Class="grid-row ">
                       <GridCol Span="12">
                           <Input @bind-Value="@Model.Companion.Name" Placeholder="Имя" />
                       </GridCol>
                    </GridRow>

                    <GridRow Class="grid-row ">
                       <GridCol Span="12">
                          <Input @bind-Value="@Model.Companion.Id" Placeholder="@Guid.Empty.ToString()" />
                       </GridCol>
                       <GridCol Flex=@("16px") />
                          <GridCol Span="8">
                             <Button OnClick="@(() => Model.Companion.Id = Guid.NewGuid())">Сгенерировать</Button>
                       </GridCol>
                    </GridRow>
                }
                </GridCol>
            </GridRow>

        <GridRow Class="grid-row ">
            <GridCol Span="24">
                <GridRow Class="grid-row ">
                    <GridCol Span=8>
                        Содержание диалога
                    </GridCol> 
                </GridRow>
            
                <GridRow Class="grid-row ">
                    <GridCol Flex=@("auto")>
                        <TextArea Placeholder=@($"- Реплика 1\n- Реплика 2\n- Реплика 3\n- Реплика 4\n") AutoSize MaxRows="15" Value="@Model.Content" DebounceMilliseconds="100" OnChange="OnContentChanged" />
                    </GridCol>
                </GridRow>
                <GridRow Class="grid-row ">
                    <GridCol Span="24">
                        <Button Block Icon="@IconType.Outline.Sync" OnClick="@(() => DialogueCreationManager.CreateMessageList(Model))">Обновить</Button>
                    </GridCol>
                </GridRow>
            </GridCol>
        </GridRow>
    <!--col 0-->
    </GridCol>

    <GridCol Span="12" Class="grid-col-main">
        @if (Model.ListMessages != null && Model.ListMessages.Count > 0)
        {
            <GridRow Class="grid-row ">
                <GridCol Span="24">
                    <Button Block Icon="@IconType.Outline.Download" OnClick="@(() => DialogueCreationManager.Serialize(JSRuntime, Model))">Скачать диалог</Button>
                </GridCol>
            </GridRow>
            <GridRow Class="grid-row ">
                <GridCol Flex=@("auto")>
                <AntList DataSource="@Model.ListMessages" ItemLayout="@ListItemLayout.Vertical">
                    <ChildContent Context="item">
                        <MessageView Message=@item OnDrop="e=>OnDrop(e, item.Id)" OnDragStart="e=>OnDragStart(e, item.Id)" />
                    </ChildContent>
                </AntList>
            </GridCol>
            </GridRow>
            <GridRow Class="grid-row ">
                <GridCol Span="24">
                    <Button Block Icon="@IconType.Outline.Download" OnClick="@(() => DialogueCreationManager.Serialize(JSRuntime, Model))">Скачать диалог</Button>
                </GridCol>
            </GridRow>
        }
    </GridCol>
<!--main-->
</GridRow>

@code {
    protected override Task OnInitializedAsync()
    {
        Model.Content = _content;
        Model.OnUpdateAllEvent += Refresh;

        return base.OnInitializedAsync();
    }

    private void Refresh()
    {
        StateHasChanged();
    }

    private void OnContentChanged(string value)
    {
        if (!Model.Content.Equals(value))
        {
            Model.Content = value;

            DialogueCreationManager.CreateMessageList(Model);
        }
    }

    public string _content { get; set; } =
        "- привет" + Environment.NewLine +
        "- привет" + Environment.NewLine +
        "- как дела?" + Environment.NewLine +
        "- хорошо, сам как?" + Environment.NewLine +
        "- да в целом неплохо. что собираешься делать?" +Environment.NewLine +
        "- посижу поработаю, а дальше хз" +Environment.NewLine +
        "- план хороший" +Environment.NewLine +
        "- да, мне тоже нравится" +Environment.NewLine +
        "- ну ладно, я погнал" +Environment.NewLine +
        "- а ты куда?" +Environment.NewLine +
        "- да в деревушку" +Environment.NewLine +
        "- хэх, забавно" + Environment.NewLine +
        "- ага, ладно, пока" + Environment.NewLine +
        "- удачи";


    private int? _dragging;

    void OnDrop(DragEventArgs e, int? s)
    {
        if (s.HasValue && _dragging.HasValue)
        {
            var tempDrag = Model.ListMessages[_dragging.Value];
            var tempCurrent = Model.ListMessages[s.Value];

            Model.ListMessages[s.Value] = tempDrag;
            Model.ListMessages[_dragging.Value] = tempCurrent;

            _dragging = null;

            Model.Content = "- " + string.Join("\n- ", Model.ListMessages.Select(x => x.Message));

            DialogueCreationManager.CreateMessageList(Model);

            StateHasChanged();
        }
    }

    void OnDragStart(DragEventArgs e, int? s)
    {
        e.DataTransfer.DropEffect = "move";
        e.DataTransfer.EffectAllowed = "move";
        _dragging = s;
    }

    public void Dispose()
    {
        Model.OnUpdateAllEvent -= Refresh;
    }
}
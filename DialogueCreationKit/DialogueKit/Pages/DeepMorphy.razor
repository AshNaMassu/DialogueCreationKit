@page "/deepmorphy"
@using DialogueCreationKit.DialogueKit.Components;
@using DialogueCreationKit.DialogueKit.Contracts;
@using DialogueCreationKit.DialogueKit.Domain.ViewModel
@using DialogueCreationKit.DialogueKit.Enums;
@using DialogueCreationKit.DialogueKit.Helpers;
@using DialogueCreationKit.DialogueKit.Managers;
@using DialogueCreationKit.DialogueKit.Domain;

@inject IDialogueCreationModel _model
@inject IJSRuntime _js 
@implements IDisposable

<GridRow Class="grid-row main">
    <!--main-->

    <GridCol Span="12" Class="grid-col-main">
        
        <GridRow Class="grid-row ">
            <GridCol Flex=@("auto")>
                <Button Block Disabled=@(IsWorking || _model.IsEmptyListMessages) OnClick="VerbAnalizer">Анализировать сообщения</Button>
            </GridCol>
                <GridCol Flex=@("auto")>
                <Button Block Disabled=@(IsWorking || !(_model.ListMessagesMorphy?.Where( x => x.Checks != null && x.Checks.Count > 0).Count() > 0)) OnClick="CreateMorphy">Определение вариантов глаголов</Button>
            </GridCol>
                <GridCol Flex=@("auto")>
                <Button Block Disabled=@(IsWorking || _model.ListMessagesMorphy == null || _model.ListMessagesMorphy.Count == 0) OnClick="()=>{DialogueCreationManager.SerializeMorphy(_js, _model);}">Сериализовать и скачать</Button>
            </GridCol>
        </GridRow>

        @if (_model.ListMessagesMorphy != null && _model.ListMessagesMorphy.Count > 0)
        {
            <GridRow Class="grid-row ">
                <GridCol Flex=@("auto")>
                    <AntList DataSource="@_model.ListMessagesMorphy" ItemLayout="@ListItemLayout.Vertical">
                        <ChildContent Context="item" >
                            <MessageView Message=@item.Message OnMessageClick="()=> {SelectedMessage = item;}" IsCheckedMessageMode />
                        </ChildContent>
                    </AntList>
                </GridCol>
            </GridRow>
        }
    </GridCol>

    <GridCol Span="12" Class="grid-col-main">
        <!--col 0-->
        <GridRow Class="grid-row ">
            <GridCol Span="24">
                <AntList DataSource="new List<DialogueMessageCheckView> {SelectedMessage}" ItemLayout="@ListItemLayout.Vertical">
                    <MessageEditing Message="@context" />
                </AntList>
            </GridCol>
        </GridRow>
        <!--col 0-->
    </GridCol>
<!--main-->
</GridRow>

@code {

    [Parameter]
    public DialogueMessageCheckView SelectedMessage { get; set; }

    private bool IsWorking { get; set; }

    protected override Task OnInitializedAsync()
    {
        if (_model.IsEmptyListMessagesMorphy)
            DialogueCreationManager.CreateMorphyFromMessages(_model);

        _model.OnUpdateAllEvent += Refresh;

        return base.OnInitializedAsync();
    }

    private void Refresh()
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        _model.OnUpdateAllEvent -= Refresh;
    }

    private void Editing()
    {
        // var resp = MorphemesManager.WordsInitializer(SelectedMessage.Message.Message);
    }

    private async Task VerbAnalizer()
    {
        IsWorking = true;

        //_model.ListMessagesMorphy.ForEach(x => x.Checks?.Clear());

        foreach (var message in _model.ListMessagesMorphy)
        {
            if (message.Message.Id % 2 == 0 && !string.IsNullOrWhiteSpace(message.Message.Message))
            {

                var words = message.Message.Message.RemoveExtraSpacesAndToWord();

                if (words == null && words.Length == 0) continue;

                foreach (var word in words)
                {
                    if (string.IsNullOrWhiteSpace(word) || word.Length < 2) continue;

                    DialogueMessageCheck checksTemp = null;

                    if (word[0] == '$')
                    {
                        var alreadyExist = message.Checks.FirstOrDefault(x => word.Contains(x.Value));
                        if (alreadyExist != null)
                        {
                            message.Checks.Remove(alreadyExist);
                        }

                        continue;
                    }
                    else if (word[0] == '#')
                    {
                        checksTemp = new() { Value = word.Substring(1, word.Length - 1) };
                    }
                    else
                    {
                        checksTemp = await MorphemesManager.WordsInitializer(word);

                        if (!MorphemesManager.Status.Status || checksTemp == null)
                        {
                            var alreadyExist = message.Checks.FirstOrDefault(x => word.Contains(x.Value));
                            if (alreadyExist != null)
                            {
                                message.Checks.Remove(alreadyExist);
                            }

                            continue;
                        }
                        

                        var indexOf = message.Message.Message.IndexOf(word);

                        if (indexOf == 0 || message.Message.Message[indexOf - 1] != '#')
                        {
                            message.Message.Message = message.Message.Message.Replace(word, $"#{word}");
                        }    
                    }

                    if (message.Checks == null)
                    {
                        message.Checks = new();
                    }


                    var c = message.Checks.FirstOrDefault(x => x.Value.Equals(checksTemp.Value));

                    if (c == null)
                        message.Checks.Add(checksTemp);
                }
            }
        }

        IsWorking = false;
        StateHasChanged();
    }

    private void CreateMorphy()
    {
        foreach (var message in _model.ListMessagesMorphy)
        {
            if (message.Checks.Count > 0)
            {
                MorphemesManager.GetMessageWithOptions(message.Checks);
            }
        }
    }
}

@using Blazor.Diagrams.Components.Renderers
@using DialogueCreationKit.Dialogue.Models.Diagram
@using DialogueCreationKit.Dialogue.Models
@using DialogueCreationKit.Dialogue.Models.Enums

@if (Node != null && Node.DialogueMessage != null && Child != null)
{
    <div class="port-container">
        @if (Child.Stage != DialogueStage.Begin && Port?.Alignment == PortAlignment.Left)
        {
            <PortRenderer Port="Port" Class="port"/>
        }

        <span style="margin: 1px 24px">
        @Child.Id
        </span>

        @if (Node.DialogueMessage.Stage != DialogueStage.End && Port?.Alignment == PortAlignment.Right)
        {
            <PortRenderer Port="Port" Class="port"/>
        }
    </div>
}

@code {
    private bool _shouldRender = true;

    [Parameter]
    public DialogueNodeModel Node { get; set; }

    [Parameter]
    public DialogueMessageView Child { get; set; }

    private DialoguePortModel _port;

    public DialoguePortModel Port
    {
        get
        {
            if (_port == null)
            {
                _port = Node.GetPort(Child);
            }

            return _port;
        }
    }

    //public bool HasLinks => DialogueNode.GetPort(DialogueMessage)?.Links.Count > 0;

    public void Dispose()
    {
       Child.Changed -= ReRender;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Child.Changed += ReRender;
    }

    protected override bool ShouldRender() => _shouldRender;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _shouldRender = false;
        await base.OnAfterRenderAsync(firstRender);
    }

    private void ReRender()
    {
        _shouldRender = true;
        StateHasChanged();
    }
}